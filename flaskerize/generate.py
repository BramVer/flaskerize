
def _generate(contents, file, mode='w', dry_run=False):
    if not dry_run:
        with open(file, mode) as fid:
            fid.write(contents)
    print(f"Successfully created {file}")


def hello_world(args):
    print('Generating a hello_world app')

    CONTENTS = f"""# DO NOT EDIT THIS FILE. It is generated by flaskerize and may be
# overwritten
import os
from flask import Flask, send_from_directory

def create_app():
    app = Flask(__name__)

    # Serve React App
    @app.route('/')
    def serve():
        return 'Hello, Flaskerize!'
    return app

if __name__ == '__main__':
    app = create_app()
    app.run()

    """
    _generate(CONTENTS, args.output_name, dry_run=args.dry_run)
    print("Successfully created new app '{}'".format(args.output_name))


def app_from_dir(args):
    """
    Serve files using `send_from_directory`. Note this is less secure than
    from_static_files as anything within the directory can be served.
    """
    print('args = ', args)
    print('Generating an app from static site directory')

    # The routing for `send_from_directory` comes directly from https://stackoverflow.com/questions/44209978/serving-a-create-react-app-with-flask  # noqa
    CONTENTS = f"""# DO NOT EDIT THIS FILE. It is generated by flaskerize and may be
# overwritten

import os
from flask import Flask, send_from_directory


def create_app():
    app = Flask(__name__, static_folder='{args.source}')

    # Serve static site
    @app.route('/', defaults={{'path': ''}})
    @app.route('/<path:path>')
    def serve(path):
        if path != "" and os.path.exists(app.static_folder + path):
            return send_from_directory(app.static_folder, path)
        else:
            return send_from_directory(app.static_folder, 'index.html')
    return app

if __name__ == '__main__':
    app = create_app()
    app.run()

    """
    _generate(CONTENTS, args.output_name, dry_run=args.dry_run)
    print("Successfully created new app '{}'".format(args.output_name))


def app(args):
    CONTENTS = """import os
from flask import Flask


def create_app():
    app = Flask(__name__)
    @app.route('/health')
    @app.route('/')
    def serve():
        return 'Well hello there!'
    return app


if __name__ == '__main__':
    app = create_app()
    app.run()

    """
    _generate(CONTENTS, args.output_name, dry_run=args.dry_run)
    print("Successfully created new app '{}'".format(args.output_name))


def blueprint(args):
    """
    Static site blueprint
    """
    print('args = ', args)
    print('Generating a blueprint from static site')

    # The routing for `send_from_directory` comes directly from https://stackoverflow.com/questions/44209978/serving-a-create-react-app-with-flask  # noqa
    CONTENTS = f"""# DO NOT EDIT THIS FILE. It is generated by flaskerize and may be
# overwritten

import os
from flask import Blueprint, send_from_directory

site = Blueprint('site', __name__, static_folder='{args.source}')

# Serve static site
@site.route('/', defaults={{'path': ''}})
@site.route('/<path:path>')
def serve(path):
    if path != "" and os.path.exists(site.static_folder + path):
        return send_from_directory(site.static_folder, path)
    else:
        return send_from_directory(site.static_folder, 'index.html')

    """
    _generate(CONTENTS, args.output_name, dry_run=args.dry_run)
    print("Successfully created new blueprint '{}'".format(args.output_name))


def wsgi(args):
    from flaskerize.utils import split_file_factory
    print('args = ', args)
    filename, func = split_file_factory(args.source)
    filename = filename.replace('.py', '')

    CONTENTS = f"""# DO NOT EDIT THIS FILE. It is generated by flaskerize and may be
# overwritten

from {filename} import {func}
app = {func}()
    """
    _generate(CONTENTS, args.output_name, dry_run=args.dry_run)
    print("Successfully created new wsgi '{}'".format(args.output_name))


def dockerfile(args):
    print('args = ', args)
    import os
    if os.path.isfile('requirements.txt'):
        req_txt = """COPY requirements.txt /requirements.txt
RUN pip install --install-option="--prefix=/install" -r /requirements.txt"""
    else:
        req_txt = ""
    CONTENTS = f"""FROM python:3.7-alpine as base

FROM base as builder
RUN mkdir /install
WORKDIR /install
{req_txt}
RUN pip install --install-option="--prefix=/install" gunicorn
RUN pip install --install-option="--prefix=/install" flask

FROM base
COPY --from=builder /install /usr/local
COPY . /app
WORKDIR /app

EXPOSE 8080
ENTRYPOINT ["gunicorn", "--bind", "0.0.0.0:8080", "--access-logfile", "-", "--error-logfile", "-", "{args.source}"]

    """
    _generate(CONTENTS, args.output_name, dry_run=args.dry_run)
    print("Successfully created new Dockerfile '{}'".format(args.output_name))
    print('Next, run `docker build -t my_app_image .` to build the docker image and '
          'then use `docker run my_app_image -p 127.0.0.1:80:8080` to launch')


# Mapping of keywords to generation functions
a = {
    'hello-world': hello_world, 'hw': hello_world,
    'app': app,
    'dockerfile': dockerfile,
    'wsgi': wsgi,
    'app_from_dir': app_from_dir,
    'blueprint': blueprint, 'bp': blueprint
}
